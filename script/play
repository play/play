#!/bin/sh
#
# `play` is our main Play CLI. Think of this as the overseer: it knows about
# all of the services in Play and can control them via a number of helper
# scripts.
#
# Helper scripts are located in this directory — script/ — and are loaded by
# the subcommand you run:
#
#   play update
#   # => Same as running `script/update`
#
# You should really only be interfacing with the processes and backend of Play
# through this script. If you're manually dropping down into using commands
# directly, You're Doing It Wrong™ (and should probably let us know so we can
# write something to help you out!)
set -e

# Cleanly shut everything down if we ctrl+c out.
trap "./script/play stop" INT

# Put homebrew in your $PATH if brew executable is found
if [ -f /usr/local/bin/brew ]; then
  export PATH=/usr/local/bin:$PATH
fi

# Put rbenv in your $PATH if the default path is found
if [ -d ~/.rbenv/shims ]; then
  export PATH=~/.rbenv/shims:$PATH
fi

# Usage is grepped out of this file (i.e. The Tomayko Method).
#/ usage: play [help|--help|-h] [command ...]
play_usage() {
  echo "
AVAILABLE COMMANDS:
  cache-art
  console
  help
  music
  queue
  status
  update
  "
}

# Override RAILS_ENV if we have `env` set in config/play.yml
local_env=$(ruby -ryaml -e 'puts YAML.load(File.read("config/play.yml"))["env"]')

if test -n "$local_env"; then
  export RAILS_ENV=$local_env
else
  export RAILS_ENV=${RAILS_ENV-production}
fi
export RACK_ENV=$RAILS_ENV

debug_log() {
  if [ "$DEBUG" == "1" ]; then
    echo $1
  fi
}

debug_log "RAILS_ENV is $RAILS_ENV"

# bootstrap channel if necessary

if bundle exec rake db:channels_exist
then
  debug_log 'channel already exists, great.'
else
  if bundle exec rake db:create_initial_channel
  then
    debug_log 'created initial channel'
  else
    debug_log 'could not create channel'
  fi
fi

# Handle play commands.
case "$1" in
  help|--help|-h)
    play_usage
    exit 0
    ;;
  start|'')
    debug_log "Executing /script/env"
    ./script/env

    bundle exec rake channels:start

    nohup ./script/queue > log/play-starting.log &
    debug_log "Done executing /script/queue"

    debug_log "Foregrounding script/web"
    if [ "$RAILS_ENV" == "production" ]
    then
      nohup ./script/web start > log/play-starting.log &
    else
      ./script/web start
    fi

    debug_log "Leftover jobs: $(jobs)"
    exit 0
    ;;
  stop)
    ./script/web stop
    pkill -f "script/queue"
    ;;
  *)
    ./script/$1 $2
    ;;
esac
