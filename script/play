#!/bin/sh
#
# `play` is our main Play CLI. Think of this as the overseer: it knows about
# all of the services in Play and can control them via a number of helper
# scripts.
#
# Helper scripts are located in this directory — script/ — and are loaded by
# the subcommand you run:
#
#   play update
#   # => Same as running `script/update`
#
# You should really only be interfacing with the processes and backend of Play
# through this script. If you're manually dropping down into using commands
# directly, You're Doing It Wrong™ (and should probably let us know so we can
# write something to help you out!)
set -e

# Put homebrew in your $PATH if brew executable is found
if [ -f /usr/local/bin/brew ]; then
  export PATH=/usr/local/bin:$PATH
fi

# Put rbenv in your $PATH if the default path is found
if [ -d ~/.rbenv/shims ]; then
  export PATH=~/.rbenv/shims:$PATH
fi

# Usage is grepped out of this file (i.e. The Tomayko Method).
#/ usage: play [help|--help|-h] [command ...]
play_usage() {
  echo "
AVAILABLE COMMANDS:
  cache-art
  console
  help
  music
  queue
  status
  update
  "
}

export RAILS_ENV=${RAILS_ENV-production}
export RACK_ENV=$RAILS_ENV

# Handle play commands.
case "$1" in
  help|--help|-h)
    play_usage
    exit 0
    ;;
  start|'')
    ./script/env

    ./script/music start &
    ./script/queue &
    if [ "$RAILS_ENV" == "production" ]
    then
      ./script/web start &
    else
      ./script/web start
    fi
    ;;
  stop)
    ./script/music stop
    ./script/web stop
    pkill -f "script/queue"
    ;;
  *)
    ./script/$1 $2
    ;;
esac
