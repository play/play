#!/bin/bash
#
# Bootstraps your world. Checks to see if dependencies are met, and then
# installs them if they aren't.

set -e

echo ''
echo '' > /tmp/play-bootstrap

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

success () {
  printf "\r\033[2K  [ \033[00;32mok\033[0m ] $1\n"
}

user () {
  printf "\r\033[2K  [ \033[00;33m?\033[0m ] $1"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  echo 'See /tmp/play-bootstrap for more information.'
  exit
}

info 'configure play'
if test -f "config/play.yml"
then
  success 'play config loaded'
else
  user "Are you going to use Play within a GitHub organization? (y,n) › "
  read -n 1 use_gh_org

  if [ "$use_gh_org" == "y" ]
  then
    user "What's your GitHub organization name? › "
    read gh_org
  fi

  echo ""
  echo ""
  echo "    You need to set up an OAuth application on GitHub. Go here:"
  echo ""

  if [ -z "$gh_org" ]
  then
    echo "    https://github.com/settings/applications/new"
  else
    echo "    https://github.com/organizations/$gh_org/settings/applications/new"
  fi

  echo ""
  echo "    and set up your application. Unless you're using a different"
  echo "    hostname, you'll want to use values that look like:"
  echo ""
  echo "      Main URL:     http://localhost:5050"
  echo "      Callback URL: http://localhost:5050/auth/github/callback"
  echo ""

  user "What is your GitHub client ID? › "
  read client_id
  user "What is your GitHub client secret? › "
  read secret

  # Generate an auth token
  if test $(which md5)
  then
    auth_token=$(date | md5)
  else
    auth_token=$(date | md5sum)
  fi

  # Write out play.yml
  if ruby -r yaml -e "
    hash = YAML.load_file('config/play.yml.example')
    hash['auth_token'] = '$auth_token'
    hash['github']['org'] = '$gh_org'
    hash['github']['client_id'] = '$client_id'
    hash['github']['secret'] = '$secret'
    File.open('config/play.yml', 'w') {|f| f.write(hash.to_yaml) }
  " >> /tmp/play-bootstrap
  then
    success 'play config loaded'
  else
    fail 'configuring play'
  fi
fi

info 'configure mpd'
if test -f "config/mpd.conf"
then
  success 'mpd config loaded'
else
  user "What is the full, absolute path to your music? › "
  read path

  # Write out mpd.conf
  config_file=$(cat config/mpd.conf.example)
  if printf "music_directory \"%s\"\n\n%s" "$path" "$config_file" > config/mpd.conf 2> /tmp/play-bootstrap
  then
    success 'mpd config loaded'
  else
    fail 'configuring mpd'
  fi
fi

# Install our system dependencies.
if [ -f "script/setup.$(uname -s)" ]
then
  . script/setup.$(uname -s)
else
  fail 'platform not supported'
fi

# bundler
info 'bundler'
gem install bundler > /tmp/play-bootstrap
success 'bundler'

# gems
info 'gems'
if bundle install --binstubs --path vendor/gems >> /tmp/play-bootstrap
then
  success 'gems'
else
  fail 'gems'
fi

# Create database. Assume root user and blank password. If this doesn't work,
# tell them to do it manually.
info 'setting up mysql'

[ $MYSQL_USER ] && user=$MYSQL_USER || user='root'
[ $MYSQL_PASSWORD ] && password=$MYSQL_PASSWORD || password=''

if mysql -u $user --password="$password" -e 'USE play' >> /tmp/play-bootstrap 2>&1
then
  success 'mysql database ready'
else
  if mysql -u $user --password="$password" -e 'CREATE DATABASE IF NOT EXISTS play CHARACTER SET utf8 COLLATE utf8_unicode_ci;' >> /tmp/play-bootstrap 2>&1
  then
    success 'created mysql database'
  else
    echo "We assume MySQL credentials of root and a blank password. If that's not the case, run script/bootstrap with MYSQL_USER and MYSQL_PASSWORD environment variables set." >> /tmp/play-bootstrap
    fail 'could not create mysql database'
  fi
fi

info 'data migrations'
if bundle exec rake db:migrate >> /tmp/play-bootstrap 2>&1
then
  success 'data migrated'
else
  fail 'problem migrating data'
fi

info 'caching album art'
if script/cache-art >> /tmp/play-bootstrap 2>&1
then
  success 'album art cached'
else
  fail 'problem caching album art'
fi

echo ""
echo "  You're all set!"
